/***********************************
 * Name: Vicky Mohammad
 * ID: 0895381
 * Date: February 10, 2018
 ***********************************/

-------------------------<<<< NOTE >>>>-------------------------
Please note that the total execution time differ depending on hardware.
Also execution are used with double value, if execution time is faster than
0.000001, it will display 0.000000.
This was run on hardware:
- Intel Core i7-4702HQ 3.2GHZ
- NVIDIA GTX 870 3GB VRAM
- WINDOWS 10 OPERATING SYSTEM

--------------<<<< Q1a: Brute Force Inversion >>>>--------------

An inversion count in an array determines how far or close, and array is
being sorted. If the array is already sorted, the inversion count would be
0, hence the higher the number, the more numbers that is needed to be sorted.
For brute force inversion, I use two nested for loop to be able to compare
every element. If for every element of A[i] > A[j] for i < j, then I use a
counter that would add 1 to the total count whenever A[i] > A[j].
Hence, the time complexity would be O(n^2). Please note that the total 
execution time differ depending on hardware.

Time complexity: O(n^2)
Total inversion: 623897407
Total execution time: 6.984375 seconds

-----------<<<< Q1b: Divide and Conquer Inversion >>>>----------

For counting the inversion using divide and conquer, I use mergesort and modify
the function to return the total inversion counts. Rather than bruteforce, suppose
we know the number of the left half and the other right half of the array, we would have
to think where the inversion are not accounted for. Since it is using merge sort,
I must also count the inversion during the merge step of the merge sort. Hence, to get 
the number of inversion, I added all the total inversion from the left sub array,
right sub array and as well as the merge. For the merge process, let "leftIndex" is for 
left index array, and "rightIndex" as the right index of the right array. For any step
for the merge if array[leftIndex] > array[rightIndex] then there (middle - leftIndex)
inversion, once left and right sub array is already sorted, all the remaining elements in 
left sub array (recurance relation: array[leftIndex+1], array[leftIndex+2], ... array[middle])
is going to be greater than array[rightIndex]. The time complexity 
would be O(nlogn) by using divide and conquer. Please note that the total 
execution time differ depending on hardware.

Time complexity: O(nlogn)
Total Inversion: 623897407
Total execution time: 0.000001 to 0.015625 seconds

-------------<<<< Q2a: Brute Force Convex Hull >>>>-------------

For finding the convex hull points, I use 3 nested for loop and use
the 2 points and the subject points to find the convex hall. Iterating
over every pair of points. Since it used by three for loops, the time
complexity would be O(n^3). If all the other points are to the right, or
left depending the line formed by the 2 points calling the function
"getSideOfline" will determine part of the result set
of the convex hull. When convex hull point is found, I iterate the number of points
and print the position where the hull point is found:

Found Point: 2147.1, 1826.1
Found Point: 2143.7, 2115.4
Found Point: 1858.6, 2146.9
Found Point: 2146.4, 2024.5
Found Point: 2135.3, 2133.6
Found Point: 1.1, 1705.6
Found Point: 2147.3, 1603.2
Found Point: 2110.5, 4.1
Found Point: 607.7, 1.2
Found Point: 3.0, 2144.1
Found Point: 2068.0, 1.9
Found Point: 1298.6, 2147.3
Found Point: 1962.2, 1.6
Found Point: 193.9, 2147.0
Found Point: 137.8, 2146.6
Found Point: 3.2, 13.9
Found Point: 2147.4, 62.0
Found Point: 2147.3, 7.4
Found Point: 547.7, 1.2
Found Point: 2147.5, 165.4
Found Point: 1.1, 331.7
Found Point: 2111.1, 2146.7
Found Point: 12.3, 2.4
Found Point: 438.8, 2147.5

Time complexity: O(n^3)
Total number of points: 24
Total execution time: 80.562500 seconds

----------<<<< Q2b: Divide and Conquer Convex hull >>>>---------

For divide and conquer convex hull given the set of points
to find the convex hull points. Basically, divide the n points into two
halves, and then find convex hull of each subset. lastly combine the two hulls
into overall convex hull. Suppose that I get convex hull of the 
left half points and the right half points, then, after finding the left 
and right point, merge these two convex hulls and then I determine the convex
hull to complete the set by using recusrion "searchHall". This can be done 
by finding the upper and lower tangent to the right and left convex 
hulls. Then I try to find the line segment from the prevous function 
"getSideOfline" each time while trying to join the most right vertex on 
the left to the most left vertex on the right. Keeping the left end of the line
segment fixed, and see if the right end can be raised, then look on the right polygon
clockwise, to see it could be a better line segment. Otherwise see if the left end
can be raised while the right end remained fixed.

Master Theorem for Recurrences
Consider the recurrence: 
T(n) = aT(n/b) + f(n). 

Then
- If F(n) << n^(logba) then T(n) = O(n^(logba))
- If F(n) = n^(logba) then T(n) = O(n^(logba)*logn)
- If F(n) >> n^(logba) and Lim n -> infinity aF(n/b)/F(n) < 1 then T(n) = O(F(n))

recurrence: T(n) = 2T(n/2) + O(n)
Therefore:
    O(nlogn)

The points of convex hull found are:
Found point: 1.1, 1705.6
Found point: 2147.5, 165.4
Found point: 2135.3, 2133.6
Found point: 3.0, 2144.1
Found point: 2111.1, 2146.7
Found point: 438.8, 2147.5
Found point: 137.8, 2146.6
Found point: 193.9, 2147.0
Found point: 1298.6, 2147.3
Found point: 1858.6, 2146.9
Found point: 2146.4, 2024.5
Found point: 2143.7, 2115.4
Found point: 2147.3, 1603.2
Found point: 2147.1, 1826.1
Found point: 12.3, 2.4
Found point: 2110.5, 4.1
Found point: 2147.3, 7.4
Found point: 2147.4, 62.0
Found point: 1962.2, 1.6
Found point: 2068.0, 1.9
Found point: 547.7, 1.2
Found point: 607.7, 1.2
Found point: 1.1, 331.7
Found point: 3.2, 13.9

Time complexity: O(nlogn)
Total number of points: 24
Total execution time: 0.000001 to 0.015625 seconds

----------------------------------------------------------------


